@page "/Payments/Create"
@inject IToastService toastService
@inject HttpClient http
@using System.Net.Http.Headers;
@inject NavigationManager navManager

<div class="row">
    <div class="col-12">
        <EditForm Model="@payment" OnValidSubmit="SavePayment">
            <h3>Create Customer</h3>
            <DataAnnotationsValidator />
            <div class="form-group row mb-1">
                <label class="col-form-label col-2 text-end" for="@payment.CustomerID">Customer</label>
                <div class="col-7">
                    <InputSelect @bind-Value="payment.CustomerID" class="form-select">
                        <option value="">Select</option>
                        @if (customers is not null)
                        {
                            foreach (var c in customers)
                            {
                                <option value="@c.CustomerID">@c.CustomerName</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(()=>payment.CustomerID)" class="text-danger" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-2 text-end" for="@payment.StartDate">Start date</label>
                <div class="col-7">
                    <InputDate Type="InputDateType.Date" @bind-Value="@payment.StartDate" class="form-control" />
                    <ValidationMessage For="@(()=>payment.StartDate)" class="text-danger" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label class="col-form-label col-2 text-end" for="@payment.EndDate">End date</label>
                <div class="col-7">
                    <InputDate Type="InputDateType.Date" @bind-Value="@payment.EndDate" class="form-control" />
                    <ValidationMessage For="@(()=>payment.EndDate)" class="text-danger" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label for="@payment.PaymentDone" class="col-form-label col-form-label-sm col-2 text-end">Is Continuing</label>
                <div class="col-4 pt-1">
                    <InputCheckbox @bind-Value="@payment.PaymentDone" />

                </div>
            </div>
            <div class="form-group row mb-1">

                <div class="col-9">
                    <div class="d-flex justify-content-between">
                        <h4>Works</h4> <button @onclick="@AddItem" type="button" class="btn btn-primary btn-sm m-1"><i class="bi bi-plus"></i></button>
                    </div>
                </div>
            </div>
            @foreach (var oi in payment.Works)
            {
                int i = 0;
                <div class="form-group row mb-1">
                    <label class="col-form-label col-1 text-end" for="@payment.CustomerID">Worker</label>
                    <div class="col-3">
                        <InputSelect @bind-Value="oi.WorkerId" class="form-select">
                            <option value="">Select</option>
                            @if (workers is not null)
                            {
                                foreach (var p in workers)
                                {
                                    <option value="@p.WorkerId">@p.WorkerName</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(()=>oi.WorkerId)" class="text-danger" />
                    </div>
                    <label class="col-form-label col-1 text-end" for="@oi.TotalWorkHour">Total Work Hours</label>
                    <div class="col-3">
                        <InputNumber @bind-Value="oi.TotalWorkHour" class="form-control" />

                        <ValidationMessage For="@(()=>oi.TotalWorkHour)" class="text-danger" />
                    </div>
                    <div class="col-1">
                        <button @onclick="@(()=>RemoveItem(i++))" type="button" class="btn btn-secondary btn-sm">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            }
            <div class="form-group row mb-1">

                <div class="col-9">
                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-primary">Save the payment</button>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>
@code {
    private PaymentDTO payment = new();
    private Customer[]? customers;
    private Worker[]? workers;
    protected override async Task OnInitializedAsync()
    {
        payment.Works.Add(new WorkDTO());
        customers = await http.GetFromJsonAsync<Customer[]>("api/Customers");
        workers = await http.GetFromJsonAsync<Worker[]>("api/Workers");
    }
    private void AddItem()
    {
        payment.Works.Add(new WorkDTO());
    }
    private void RemoveItem(int index)
    {
        if (payment.Works.Count > 1)
            ((List<WorkDTO>)payment.Works).RemoveAt(index);
    }
    private async Task SavePayment()
    {
        var response = await http.PostAsJsonAsync("api/Payments/DTO", payment);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowSuccess("Data saved successfully", "Success");
            payment = new();
            payment.Works.Add(new WorkDTO());
        }
        else
        {
            toastService.ShowError("Failed to data.", "Error");
        }
        await Task.CompletedTask;
    }
}
